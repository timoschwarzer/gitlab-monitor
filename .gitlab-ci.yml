# TODO - remove comments before merging!
stages:
  - open-pr
  - build-prerequisites
#  - test
#  - deploy-to-ephemeral
#  - ephemeral-integration-tests
#  - post-test
#  - deploy-to-test
#  - wait-for-test-deployment
#  - post-deploy-to-test-integration-tests
  - deploy-to-prod
  - wait-for-prod-deployment
  - post-deploy-to-prod-integration-tests
#  - undeploy-from-test
  - undeploy-from-prod
#  - nightly

default:
  tags:
    - test-runner # default gitlab runner/environment for jobs in this pipeline

variables:
  # Temporary app name. This should also be the same name as the app name in the Chart.yml file.
  # In case we want to continue to use APP_SERVICE_NAME instead of CI_PROJECT_NAME, we should keep this
  # as well as any references to this variable in this pipeline file. If we do proceed to remove
  # this variable, we should replace any references to this variable in this file with $CI_PROJECT_NAME
  # which, at least in this case, is the same as the service name.
  APP_SERVICE_NAME: $CI_PROJECT_NAME
  ARTIFACTORY_REPO: docker.artifactory.acorn.cirrostratus.org
  APP_IMAGE: $ARTIFACTORY_REPO/$CI_PROJECT_PATH:$CI_COMMIT_SHA
  APP_DOCKERFILE: docker/Dockerfile
  UNIT_TESTS_DOCKERFILE: docker/Dockerfile-Unit-Tests
  TESTS_IMAGE: $ARTIFACTORY_REPO/$CI_PROJECT_PATH-tests:$CI_COMMIT_SHA
  UNIT_TESTS_IMAGE: $ARTIFACTORY_REPO/$CI_PROJECT_PATH-unit-tests:$CI_COMMIT_SHA
  TESTS_DOCKERFILE: $CI_PROJECT_DIR/integration-tests/Dockerfile-tests
  MANIFEST_OUTPUT_DIRECTORY: manifest-output

include:
  # template repo: https://gitlab.com/capstan/pow/gitlab-templates/
  - project: capstan/pow/gitlab-templates
    file: /create-pr/template.yml
  - project: capstan/pow/gitlab-templates
    file: /build-image/template.yml
  - project: capstan/pow/gitlab-templates
    file: /render-charts/template.yml
  - project: capstan/pow/gitlab-templates
    file: /run-app-builder-deployer/template.yml
  - project: capstan/pow/gitlab-templates
    file: /check-healthy-deployment/template.yml
  - project: capstan/pow/gitlab-templates
    file: /run-integration-tests/template.yml
  - project: capstan/pow/gitlab-templates
    file: /run-argo-deployer/template.yml

open pr:
  stage: open-pr
  extends: .create-pr
  except:
    - schedules

build app image:
  extends: .build-image
  stage: build-prerequisites
  variables:
    CONTEXT: $CI_PROJECT_DIR
  before_script:
    - export DOCKERFILE=$APP_DOCKERFILE
    - export IMAGE_TAG=$APP_IMAGE
  except:
    - schedules

build test image:
  extends: .build-image
  stage: build-prerequisites
  variables:
    CONTEXT: $CI_PROJECT_DIR/integration-tests
  before_script:
    - export DOCKERFILE=$TESTS_DOCKERFILE
    - export IMAGE_TAG=$TESTS_IMAGE
  except:
    - schedules

# TODO - uncomment before merging!
#build unit-test image:
#  extends: .build-image
#  stage: build-prerequisites
#  variables:
#    CONTEXT: $CI_PROJECT_DIR
#  before_script:
#    - export DOCKERFILE=$UNIT_TESTS_DOCKERFILE
#    - export IMAGE_TAG=$UNIT_TESTS_IMAGE
#  except:
#    - schedules

# TODO - uncomment before merging!
#render ephemeral charts:
#  extends: .render-charts
#  stage: build-prerequisites
#  variables:
#    EUREKA_SERVICE_NAME: $CI_PROJECT_NAME-$CI_COMMIT_SHA
#  except:
#    - schedules

render final charts:
  extends: .render-charts
  stage: build-prerequisites
  only:
    refs:
      - pow-1472

# TODO - uncomment before merging!
#sonar qube:
#  allow_failure: true
#  stage: test
#  image: $UNIT_TESTS_IMAGE
#  script:
#    - if [ "$CI_COMMIT_BRANCH" == "master" ]; then TARGET="-Dsonar.branch.target=master"; else TARGET=""; fi
#    - cd /usr/src/app
#    - npm run sonar-scanner -- -Dsonar.host.url=http://sonarqube.apps.test.cirrostratus.org/ -Dsonar.projectKey=${CI_PROJECT_NAME} -Dsonar.branch.name=${CI_COMMIT_BRANCH} ${TARGET}
#  except:
#    - schedules

# TODO - uncomment before merging!
#deploy to ephemeral:
#  stage: deploy-to-ephemeral
#  extends: .run-app-builder-deployer
#  variables:
#    EKS_CLUSTER: ephemeral
#    K8S_ACTION: apply
#    MANIFEST_FILE: $MANIFEST_OUTPUT_DIRECTORY/app-manifest.yml
#  dependencies:
#    - render ephemeral charts
#  except:
#    - schedules

# TODO - uncomment before merging!
#unit tests:
#  allow_failure: false
#  stage: test
#  image: $UNIT_TESTS_IMAGE
#  script:
#    - cd /usr/src/app
#    - npm test
#  after_script:
#    - cp -r /usr/src/app "$CI_PROJECT_DIR"
#  artifacts:
#    reports:
#      junit:
#        - target/surefire-reports/TEST-*.xml
#  except:
#    - schedules

# TODO - uncomment before merging!
#wait for deployment to ephemeral:
#  extends: .check-healthy-deployment
#  stage: deploy-to-ephemeral
#  variables:
#    EUREKA_SERVICE_NAME: $CI_PROJECT_NAME-$CI_COMMIT_SHA
#  except:
#    - schedules

# TODO - uncomment before merging!
#stage 1 integration tests:
#  stage: ephemeral-integration-tests
#  extends: .integration-tests
#  variables:
#    APP_URL: $CI_PROJECT_NAME-$CI_COMMIT_SHA
#    RAKE_TASK: gitlab-monitor:integration
#  except:
#    - schedules

# TODO - uncomment before merging!
#undeploy from ephemeral:
#  stage: post-test
#  extends: .run-app-builder-deployer
#  when: always
#  variables:
#    EKS_CLUSTER: ephemeral
#    K8S_ACTION: delete
#    MANIFEST_FILE: $MANIFEST_OUTPUT_DIRECTORY/app-manifest.yml
#  dependencies:
#    - render ephemeral charts
#  except:
#    - schedules

# TODO - uncomment before merging!
#deploy to test:
#  extends: .run-argo-deployer
#  stage: deploy-to-test
#  only:
#    refs:
#      - pow-1472
#  variables:
#    ACTION: deploy
#    INPUT_FILES_LOCATION: $MANIFEST_OUTPUT_DIRECTORY
#    GROUP_NAME: pow
#    APP_NAME: $APP_SERVICE_NAME
#    ENVIRONMENT: test
#  before_script:
#    - ls $MANIFEST_OUTPUT_DIRECTORY
#  dependencies:
#    - render final charts

#wait for deployment to test:
#  extends: .check-healthy-deployment
#  stage: wait-for-test-deployment
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "schedule" && $PIPELINE == "DEPLOY_TEST"'
#      when: always
#    - when: never
#  variables:
#    EUREKA_SERVICE_NAME: $APP_SERVICE_NAME
#    ENVIRONMENT: "test"

deploy to prod:
  tags:
    - prod-runner
  extends: .run-argo-deployer
  stage: deploy-to-prod
  only:
    refs:
      - pow-1472
  variables:
    ACTION: deploy
    INPUT_FILES_LOCATION: $MANIFEST_OUTPUT_DIRECTORY
    GROUP_NAME: pow
    APP_NAME: $APP_SERVICE_NAME
    ENVIRONMENT: prod
  dependencies:
    - render final charts

wait for deployment to prod:
  tags:
    - prod-runner
  extends: .check-healthy-deployment
  stage: wait-for-prod-deployment
  only:
    refs:
      - pow-1472
  variables:
    ENVIRONMENT: prod
    EUREKA_SERVICE_NAME: $APP_SERVICE_NAME

# TODO - uncomment before merging!
#integration tests for test environment:
#  extends: .integration-tests
#  stage: post-deploy-to-test-integration-tests
#  only:
#    refs:
#      - pow-1472
#  variables:
#    APP_URL: $APP_SERVICE_NAME
#    RAKE_TASK: $APP_SERVICE_NAME:integration
#  dependencies:
#    - wait for deployment to test

integration tests for prod environment:
  tags:
    - prod-runner
  extends: .integration-tests
  stage: post-deploy-to-prod-integration-tests
  only:
    refs:
      - pow-1472
  variables:
    APP_URL: $APP_SERVICE_NAME
    RAKE_TASK: $APP_SERVICE_NAME:integration
  dependencies:
    - wait for deployment to prod

# TODO - uncomment before merging!
#undeploy from test:
#  extends: .run-argo-deployer
#  stage: undeploy-from-test
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "schedule" && $PIPELINE == "UNDEPLOY_TEST"'
#      when: always
#    - when: never
#  variables:
#    ACTION: undeploy
#    GROUP_NAME: pow
#    APP_NAME: $APP_SERVICE_NAME
#    ENVIRONMENT: test

undeploy from prod:
  tags:
    - prod-runner
  extends: .run-argo-deployer
  stage: undeploy-from-prod
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $PIPELINE == "UNDEPLOY_TEST"'
      when: always
    - when: never
  variables:
    ACTION: undeploy
    GROUP_NAME: pow
    APP_NAME: $APP_SERVICE_NAME
    ENVIRONMENT: prod
